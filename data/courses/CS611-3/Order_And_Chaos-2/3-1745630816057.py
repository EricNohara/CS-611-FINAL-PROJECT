# -*- coding: utf-8 -*-
"""challenge_spring2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nr94wD72WNNTA_3hGdcxwkz2mTioF_X0

# CS541 Applied Machine Learning Spring 2025 - Class Challenge

In this class challenge assignment, you will be building a machine learning model to predict the price of an Airbnb rental, given the dataset we have provided. Total points: **100 pts**

To submit your solution, you need to submit a python (.py) file named challenge.py on Gradescope.
Initial Submission due on April 22, 2025
Final Submission due May 1, 2025

The top-3 winners will present their methodology on the last day of class (May 1st). Instructions on the presentation to follow.

There will be a Leaderboard for the challenge that can be seen by all students. USE YOUR FULL NAME AND NO NICKNAMES.

To encourage you to get started early on the challenge, you are required to submit an initial submission due on **April 22**. For this submission, your model needs to achieve a MSE of 0.16 or lower denoted as Baseline1.csv in the Kaggle Leaderboard. The final submission will be due on **May 1**.

## Problem and dataset description
Pricing a rental property such as an apartment or house on Airbnb is a difficult challenge. A model that accurately predicts the price can potentially help renters and hosts on the platform make better decisions. In this assignment, your task is to train a model that takes features of a listing as input and predicts the price.

We have provided you with a dataset collected from the Airbnb website for New York, which has a total of 29,985 entries, each with 765 features. You may use the provided data as you wish in development. We will train your submitted code on the same provided dataset, and will evaluate it on 2 other test sets (one public, and one hidden during the challenge).

We have already done some minimal data cleaning for you, such as converting text fields into categorical values and getting rid of the NaN values. To convert text fields into categorical values, we used different strategies depending on the field. For example, sentiment analysis was applied to convert user reviews to numerical values ('comments' column). We added different columns for state names, '1' indicating the location of the property. Column names are included in the data files and are mostly descriptive.

Also in this data cleaning step, the price value that we are trying to predict is calculated by taking the log of original price. Hence, the minimum value for our output price is around 2.302 and maximum value is around 9.21 on the training set.

## Datasets and Codebase

Please download the zip file from the link posted on Piazza/Resources.
In this notebook, we implemented a linear regression model with random weights (**attached in the end**). For datasets, there’re 2 CSV files for features and labels:

    challenge.ipynb (This file: you need to add your code in here, convert it to .py to submit)
    data_cleaned_train_comments_X.csv
    data_cleaned_train_y.csv

## Instructions to build your model
1.  Implement your model in **challenge.ipynb**. You need to modify the *train()* and *predict()* methods of **Model** class (*attached at the end of this notebook*). You can also add other methods/attributes  to the class, or even add new classes in the same file if needed, but do NOT change the signatures of the *train()* and *predict()* as we will call these 2 methods for evaluating your model.

2. To submit, you need to convert your notebook (.ipynb) to a python **(.py)** file. Make sure in the python file, it has a class named **Model**, and in the class, there are two methods: *train* and *predict*. Other experimental code should be removed if needed to avoid time limit exceeded on gradescope.

3.  You can submit your code on gradescope to test your model. You can submit as many times you like. The last submission will count as the final model.

An example linear regression model with random weights is provided to you in this notebook. Please take a look and replace the code with your own.

## Evaluation

We will evaluate your model as follows

    model = Model() # Model class imported from your submission
    X_train = pd.read_csv("data_cleaned_train_comments_X.csv")  # pandas Dataframe
    y_train = pd.read_csv("data_cleaned_train_y.csv")  # pandas Dataframe
    model.train(X_train, y_train) # train your model on the dataset provided to you
    y_pred = model.predict(X_test) # test your model on the hidden test set (pandas Dataframe)
    mse = mean_squared_error(y_test, y_pred) # compute mean squared error


**There will be 2 test sets, one is public which means you can see MSE on this test set on the Leaderboard (denoted as *MSE (PUBLIC TESTSET)*), and the other one is hidden during the challenge (denoted as *MSE (HIDDEN TESTSET)*)**.
Your score on the hidden test set will be your performance measure. So, don’t try to overfit your model on the public test set. Your final grade will depend on the following criteria:

1.  	Is it original code (implemented by you)? Use of Generative AI to generate code will be flagged as academic misconduct and will be reported to the Academic Conduct Committee (ACC)
2.  	Does it take a reasonable time to complete?
    Your model needs to finish running in under 40 minutes on our machine. We run the code on a machine with 4 CPUs, 6.0GB RAM.
3.  	Does it achieve a reasonable MSE?
    - **Initial submission (10 pts)**: Your model has to be better than the simplest model results which should be a MSE of 0.16 or lower denoted as Baseline1.csv in the leaderboard. Note this will due on **April 22**.
    
    The grade will be linearly interpolated for the submissions that lie in between the checkpoints above. We will use MSE on the hidden test set to evaluate your model (lower is better).

    **Bonus**: **Top 3** with the best MSE on the hidden test set will get a 5 point bonus.

# Answer the below questions (in the final submission due on May 1st)

1. What are the top-5 features contributed the most towards the performance? How did you identify these features? Your answer should be between 300-350 words.

2. What are the top-5 features contributed the least towards the performance? Your answer should be between 300-350 words.

3. Share the training and validation loss plots
Title of the plot should indicate the number of training / validation data points used.

# Notes & Code

**Note 1: This is a regression problem** in which we want to predict the price for an AirBnB property. You should try different models and finetune their hyper parameters.  A little feature engineering can also help to boost the performance.

**Note 2**: You may NOT use additional datasets. This assignment is meant to challenge you to build a better model, not collect more training data, so please only use the data we provided. We tested the code on Python 3.10 and 3.9, thus it’s highly recommended to use these Python versions for the challenge.

In this challenge, you can only use built-in python modules, and these following:
- Numpy
- pandas
- scikit_learn
- matplotlib
- scipy
- torchsummary
- xgboost
- torchmetrics
- lightgbm
- catboost
- torch
"""

import pandas as pd
import numpy as np

# # 读取训练数据
# X_train = pd.read_csv("./data/trainData.csv")
# y_train = pd.read_csv("./data/trainLabel.csv")["price"]


# # 读取测试数据
# X_test = pd.read_csv("./data/testingData.csv")

from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error

class Model:
    def __init__(self):
        self.model = XGBRegressor(n_estimators=500, learning_rate=0.05, max_depth=10, random_state=42, n_jobs=4)

    def train(self, X_train: pd.DataFrame, y_train: pd.DataFrame) -> None:
        self.model.fit(X_train, y_train.values.ravel())

    def predict(self, X_test: pd.DataFrame) -> np.array:
        return self.model.predict(X_test).reshape(-1, 1)

# model = Model()

# model.train(X_train, y_train)

# # 预测测试集价格（log(price)）
# y_pred = model.predict(X_test)

# submission = pd.DataFrame({
#     "id": np.arange(len(y_pred)),
#     "price": y_pred.ravel()   # 或 flatten()
# })

# submission.to_csv("submission.csv", index=False)

"""**GOOD LUCK!**

"""